package com.VisNeo4j.App.Problemas.Knapsack;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.VisNeo4j.App.Utils.Utils;

public class Knapsack01_L31 extends Knapsack01{

	double capacity = 2583.0;
	private List<Integer> weights = Stream.of(89, 1, 39, 76, 41, 27, 62, 97, 38, 51, 45, 8, 21, 77, 90, 54, 86, 21, 54, 91, 90, 49, 77, 48, 6, 77, 39, 29, 39, 60, 67, 93, 17, 10, 21, 6, 1, 98, 41, 44, 48, 67, 23, 83, 52, 92, 7, 3, 88, 17, 20, 89, 70, 49, 90, 85, 94, 52, 13, 15, 90, 88, 45, 52, 57, 1, 26, 76, 49, 67, 87, 59, 95, 28, 13, 42, 88, 16, 70, 60, 27, 3, 52, 91, 99, 63, 17, 49, 91, 100, 82, 46, 62, 49, 5, 82, 74, 54, 5, 61, 94, 25, 79, 61, 38, 75, 68, 48, 28, 98, 12, 36, 42, 90, 2, 32, 8, 54, 70, 78, 29, 2, 13, 32, 54, 64, 53, 53, 36, 24, 79, 66, 20, 97, 90, 51, 66, 92, 79, 73, 76, 70, 56, 36, 42, 27, 59, 92, 38, 23, 98, 54, 3, 41, 71, 77, 79, 16, 71, 90, 74, 96, 91, 11, 98, 63, 4, 65, 7, 38, 68, 31, 34, 95, 80, 60, 51, 98, 19, 73, 32, 10, 85, 33, 10, 14, 79, 90, 85, 90, 11, 76, 73, 5, 26, 75, 57, 39, 8, 14, 84, 42, 48, 12, 64, 6, 89, 27, 52, 86, 33, 73, 36, 10, 71, 32, 89, 57, 14, 99, 43, 42, 58, 89, 49, 93, 40, 70, 60, 72, 42, 67, 54, 47, 38, 93, 14, 74, 14, 14, 26, 28, 30, 32, 59, 92, 35, 75, 33, 17, 8, 88, 62, 39, 44, 86, 93, 85, 44, 98, 60, 58, 60, 24, 44, 43, 99, 89, 6, 36, 53, 92, 65, 64, 78, 83, 56, 99, 34, 9, 18, 71, 12, 40, 97, 22, 92, 62, 98, 24, 19, 1, 1, 3, 4, 8, 3, 23, 27, 89, 77, 16, 95, 50, 28, 65, 20, 82, 17, 96, 67, 31, 71, 67, 19, 95, 38, 70, 3, 10, 75, 32, 29, 43, 38, 4, 87, 32, 71, 98, 57, 44, 50, 89, 95, 4, 88, 4, 81, 57, 58, 87, 79, 69, 37, 56, 53, 23, 94, 84, 69, 53, 97, 5, 93, 94, 72, 12, 100, 55, 7, 82, 42, 59, 51, 40, 66, 33, 60, 12, 17, 91, 57, 83, 57, 34, 28, 23, 25, 54, 4, 72, 45, 32, 92, 64, 40, 75, 3, 21, 72, 22, 28, 19, 77, 26, 97, 81, 23, 34, 29, 26, 47, 36, 3, 5, 63, 87, 39, 91, 88, 20, 2, 10, 84, 63, 56, 65, 97, 77, 70, 96, 38, 1, 61, 10, 47, 25, 95, 95, 64, 75, 91, 66, 84, 70, 11, 29, 95, 60, 47, 21, 69, 23, 96, 13, 26, 90, 40, 72, 74, 18, 42, 12, 35, 43, 68, 47, 80, 35, 54, 31, 30, 63, 13, 3, 83, 87, 7, 50, 1, 40, 99, 93, 61, 92, 12, 5, 62, 36, 72, 56, 76, 99, 86, 94, 47, 1, 6, 30, 28, 76, 6, 68, 56, 87, 4, 78, 1, 19).collect(Collectors.toList());
	private List<Integer> profits = Stream.of(82, 4, 33, 67, 42, 28, 61, 107, 36, 59, 43, 1, 14, 79, 96, 51, 78, 21, 63, 90, 90, 41, 68, 42, 1, 75, 48, 33, 38, 50, 61, 103, 12, 18, 21, 1, 1, 108, 46, 52, 56, 76, 17, 73, 53, 86, 3, 11, 90, 19, 20, 99, 74, 49, 92, 76, 89, 56, 12, 19, 81, 84, 52, 61, 47, 1, 35, 74, 58, 66, 95, 58, 98, 37, 9, 44, 83, 6, 69, 52, 36, 7, 45, 83, 93, 58, 27, 50, 82, 91, 76, 46, 68, 57, 7, 73, 80, 54, 1, 71, 85, 33, 88, 65, 38, 70, 72, 53, 18, 107, 5, 38, 49, 83, 11, 31, 13, 62, 78, 82, 31, 8, 16, 29, 50, 57, 62, 60, 31, 25, 85, 57, 22, 99, 84, 50, 69, 87, 86, 64, 77, 64, 61, 44, 45, 28, 64, 95, 28, 27, 88, 51, 1, 33, 76, 84, 81, 22, 68, 96, 79, 88, 91, 14, 100, 55, 3, 69, 10, 39, 64, 39, 44, 103, 74, 62, 44, 91, 18, 69, 40, 10, 90, 39, 7, 19, 76, 83, 85, 88, 16, 68, 79, 1, 32, 73, 50, 37, 16, 16, 80, 37, 41, 4, 62, 2, 80, 29, 45, 96, 25, 79, 45, 2, 65, 37, 96, 52, 8, 105, 48, 33, 64, 86, 47, 100, 36, 62, 68, 76, 48, 61, 55, 48, 29, 84, 16, 80, 8, 13, 19, 19, 38, 41, 69, 94, 42, 78, 40, 10, 7, 93, 58, 39, 46, 96, 103, 85, 42, 90, 64, 67, 54, 27, 35, 38, 103, 96, 1, 33, 46, 85, 64, 56, 88, 85, 66, 106, 43, 18, 27, 71, 21, 42, 98, 29, 85, 56, 88, 34, 10, 1, 1, 1, 1, 1, 1, 27, 21, 81, 77, 23, 86, 53, 22, 75, 23, 76, 7, 90, 73, 41, 68, 57, 12, 100, 42, 66, 1, 1, 73, 27, 33, 49, 28, 7, 89, 33, 79, 99, 64, 54, 57, 81, 99, 12, 91, 10, 87, 51, 59, 86, 72, 75, 47, 56, 60, 15, 85, 78, 61, 54, 94, 7, 86, 103, 63, 9, 91, 45, 8, 81, 32, 54, 47, 37, 66, 28, 64, 3, 17, 95, 50, 92, 67, 42, 23, 15, 21, 62, 1, 82, 44, 40, 99, 73, 30, 73, 8, 22, 81, 18, 31, 20, 82, 25, 106, 78, 29, 26, 26, 21, 56, 43, 1, 3, 60, 86, 42, 95, 96, 26, 1, 5, 84, 59, 56, 60, 105, 87, 71, 102, 42, 1, 65, 19, 53, 18, 95, 96, 58, 83, 100, 57, 75, 76, 21, 22, 103, 50, 43, 11, 65, 23, 98, 15, 16, 87, 39, 65, 76, 22, 38, 19, 30, 41, 60, 41, 88, 45, 62, 21, 35, 63, 14, 1, 74, 88, 16, 49, 8, 34, 101, 91, 62, 87, 5, 1, 71, 29, 73, 61, 71, 102, 82, 100, 50, 1, 1, 29, 29, 68, 12, 66, 58, 91, 1, 68, 6, 13).collect(Collectors.toList());
	
	public Knapsack01_L31() {
		super();
		super.setWeights(Utils.convertToDouble(weights));
		super.setProfits(Utils.convertToDouble(profits));
		super.setCapacity(capacity);
		int var = this.weights.size();
		super.setNumVariables(var);
	}
}
