package com.VisNeo4j.App.Problemas.Knapsack;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.VisNeo4j.App.Utils.Utils;

public class Knapsack01_kp_sc_300 extends Knapsack01{

	double capacity = 1523.0;
	private List<Integer> weights = Stream.of(89, 83, 1, 36, 39, 53, 76, 9, 41, 15, 27, 26, 62, 3, 97, 45, 38, 24, 51, 72, 45, 56, 8, 8, 21, 96, 77, 91, 90, 72, 54, 93, 86, 83, 21, 39, 54, 72, 91, 31, 90, 23, 49, 40, 77, 41, 48, 93, 6, 94, 77, 32, 39, 5, 29, 45, 39, 87, 60, 6, 67, 54, 93, 45, 17, 69, 10, 32, 21, 1, 6, 86, 1, 78, 98, 32, 41, 52, 44, 41, 48, 9, 67, 83, 23, 71, 83, 100, 52, 32, 92, 24, 7, 14, 3, 54, 88, 62, 17, 67, 20, 56, 89, 12, 70, 100, 49, 14, 90, 41, 85, 23, 94, 16, 52, 13, 13, 29, 15, 60, 90, 41, 88, 71, 45, 43, 52, 31, 57, 12, 1, 86, 26, 62, 76, 19, 49, 94, 67, 15, 87, 46, 59, 60, 95, 30, 28, 71, 13, 28, 42, 27, 88, 7, 16, 10, 70, 65, 60, 53, 27, 12, 3, 51, 52, 95, 91, 83, 99, 82, 63, 30, 17, 39, 49, 16, 91, 9, 100, 76, 82, 67, 46, 63, 62, 43, 49, 66, 5, 41, 82, 92, 74, 38, 54, 29, 5, 86, 61, 38, 94, 86, 25, 59, 79, 48, 61, 51, 38, 44, 75, 72, 68, 63, 48, 70, 28, 59, 98, 86, 12, 79, 36, 51, 42, 43, 90, 81, 2, 67, 32, 26, 8, 96, 54, 98, 70, 3, 78, 52, 29, 31, 2, 16, 13, 43, 32, 16, 54, 77, 64, 86, 53, 66, 53, 43, 36, 25, 24, 38, 79, 4, 66, 84, 20, 41, 97, 44, 90, 19, 51, 5, 66, 22, 92, 35, 79, 4, 73, 55, 76, 79, 70, 98, 56, 95, 36, 53, 42, 53, 27, 20, 59, 14, 92, 88, 38, 54, 23, 48).collect(Collectors.toList());
	private List<Integer> profits = Stream.of(99, 93, 11, 46, 49, 63, 86, 19, 51, 25, 37, 36, 72, 13, 107, 55, 48, 34, 61, 82, 55, 66, 18, 18, 31, 106, 87, 101, 100, 82, 64, 103, 96, 93, 31, 49, 64, 82, 101, 41, 100, 33, 59, 50, 87, 51, 58, 103, 16, 104, 87, 42, 49, 15, 39, 55, 49, 97, 70, 16, 77, 64, 103, 55, 27, 79, 20, 42, 31, 11, 16, 96, 11, 88, 108, 42, 51, 62, 54, 51, 58, 19, 77, 93, 33, 81, 93, 110, 62, 42, 102, 34, 17, 24, 13, 64, 98, 72, 27, 77, 30, 66, 99, 22, 80, 110, 59, 24, 100, 51, 95, 33, 104, 26, 62, 23, 23, 39, 25, 70, 100, 51, 98, 81, 55, 53, 62, 41, 67, 22, 11, 96, 36, 72, 86, 29, 59, 104, 77, 25, 97, 56, 69, 70, 105, 40, 38, 81, 23, 38, 52, 37, 98, 17, 26, 20, 80, 75, 70, 63, 37, 22, 13, 61, 62, 105, 101, 93, 109, 92, 73, 40, 27, 49, 59, 26, 101, 19, 110, 86, 92, 77, 56, 73, 72, 53, 59, 76, 15, 51, 92, 102, 84, 48, 64, 39, 15, 96, 71, 48, 104, 96, 35, 69, 89, 58, 71, 61, 48, 54, 85, 82, 78, 73, 58, 80, 38, 69, 108, 96, 22, 89, 46, 61, 52, 53, 100, 91, 12, 77, 42, 36, 18, 106, 64, 108, 80, 13, 88, 62, 39, 41, 12, 26, 23, 53, 42, 26, 64, 87, 74, 96, 63, 76, 63, 53, 46, 35, 34, 48, 89, 14, 76, 94, 30, 51, 107, 54, 100, 29, 61, 15, 76, 32, 102, 45, 89, 14, 83, 65, 86, 89, 80, 108, 66, 105, 46, 63, 52, 63, 37, 30, 69, 24, 102, 98, 48, 64, 33, 58).collect(Collectors.toList());
	
	public Knapsack01_kp_sc_300() {
		super();
		super.setWeights(Utils.convertToDouble(weights));
		super.setProfits(Utils.convertToDouble(profits));
		super.setCapacity(capacity);
		int var = this.weights.size();
		super.setNumVariables(var);
	}
}
